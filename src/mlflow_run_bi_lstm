import mlflow
import yaml
import pickle
import json
from models_preprocessing import Models_preprocessing
from bi_lstm import Bi_lstm
from pathlib import Path
from sklearn.metrics import accuracy_score, roc_auc_score, f1_score

def mlflow_run(
    config
    ,run_name
    ,x_train
    ,y_train
    ,x_val
    ,y_val
    ,x_test
    ,y_test
):
    with mlflow.start_run(run_name=run_name):
        mlflow.log_params(config)

        print("Bi_LSTM instance\n")
        bi_lstm_preprocess = Models_preprocessing(config)
        bi_lstm_model = Bi_lstm(config)

        print("Building tokenizer\n")
        tokenizer = bi_lstm_preprocess.build_keras_tokenizer(x_train)
        
        tokenizer_path = run_name + "_tokenizer.json"
        tokenizer_json = tokenizer.to_json()
        with open(tokenizer_path, "w") as json_file:
            json.dump(tokenizer_json, json_file)

        print("Preprocessing data for Bi_LSTM\n")
        x_train_cnn_ready, x_val_cnn_ready, x_test_cnn_ready, y_train_cnn, y_val_cnn, y_test_cnn = bi_lstm_preprocess.preprocessing_cnn(tokenizer, x_train, y_train, x_val, y_val, x_test, y_test)

        if config['pretrained_embedding_matrix_path'] is not None:
            print("Building pretrained embedding matrix\n")
            embedding_matrix, nonzero_elements = bi_lstm_preprocess.build_pretrained_embedding_matrix(tokenizer)
            mlflow.log_metric("Percentage of embedded vocab", nonzero_elements)

            print("Building Bi_LSTM\n")
            bi_lstm_model.build(embedding_matrix)
            history = bi_lstm_model.fit(x_train_cnn_ready, y_train_cnn, x_val_cnn_ready, y_val_cnn)
            bi_lstm_model.plot_history(history)
        else:
            print("Building Bi_LSTM without pretrained embedding matrix\n")
            bi_lstm_model.build()
            history = bi_lstm_model.fit(x_train_cnn_ready, y_train_cnn, x_val_cnn_ready, y_val_cnn)
            bi_lstm_model.plot_history(history)

        mlflow.log_artifact(config['figure_path'])

        print("Predictions\n")
        y_pred = bi_lstm_model.predict(x_test_cnn_ready)
        predicted_classes = (y_pred >= 0.5).astype(int)

        mlflow.log_metric("accuracy", accuracy_score(y_test_cnn, predicted_classes))
        mlflow.log_metric("roc_auc", roc_auc_score(y_test_cnn, y_pred))
        mlflow.log_metric("f1", f1_score(y_test_cnn, predicted_classes))

        mlflow.tensorflow.log_model(bi_lstm_model.model, run_name)
        
        model_name = run_name + "_model"
        model_path = Path("outputs") / model_name
        model_path.mkdir(exist_ok=True)
        bi_lstm_model.model.save(str(model_path))


with open("config.yaml", 'r') as f:
    config = yaml.safe_load(f)

with open(config['setup']['x_train_cleaned_path'], 'rb') as f:
    x_train = pickle.load(f)

with open(config['setup']['x_val_cleaned_path'], 'rb') as f:
    x_val = pickle.load(f)

with open(config['setup']['x_test_cleaned_path'], 'rb') as f:
    x_test = pickle.load(f)

with open(config['setup']['y_train_preprocessed_path'], 'rb') as f:
    y_train = pickle.load(f)

with open(config['setup']['y_val_preprocessed_path'], 'rb') as f:
    y_val = pickle.load(f)

with open(config['setup']['y_test_preprocessed_path'], 'rb') as f:
    y_test = pickle.load(f)

RUN_NAME = "bi_lstm_data_cleaned"

mlflow.set_tracking_uri("sqlite:///mlflow.db")
mlflow.set_experiment("DÃ©tectez les Bad Buzz grace au Deep Learning")

mlflow_run(
    config = {**config['setup'], **config['preprocessing'], **config['cnn']}
    ,run_name=RUN_NAME
    ,x_train=x_train
    ,y_train=y_train
    ,x_val=x_val
    ,y_val=y_val
    ,x_test=x_test
    ,y_test=y_test
)